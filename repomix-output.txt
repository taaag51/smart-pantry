This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-28T01:05:48.837Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
backend/
  cmd/
    server.go
  configs/
    config.go
    database.go
  internal/
    controllers/
      pantry_controller.go
    models/
      food_item.go
      pantry_model.go
    routes/
      api.go
    services/
      pantry_service.go
  Dockerfile
  go.mod
  go.sum
frontend/
  src/
    components/
      PantryForm.tsx
      PantryItemList.tsx
    pages/
      PantryPage.tsx
    services/
      api.ts
    App.tsx
    index.tsx
  package.json
.env.example
.gitignore
docker-compose.yml
PROJECT_STRUCTURE.md
README.md

================================================================
Files
================================================================

================
File: backend/cmd/server.go
================
package main

import (
	"log"
	"net/http"

	"smart-pantry/backend/configs"
	"smart-pantry/backend/internal/models"

	"github.com/joho/godotenv"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

func main() {
	// Load environment variables from .env file
	if err := godotenv.Load(); err != nil {
		log.Fatal("Error loading .env file")
	}

	// Initialize the database connection
	configs.ConnectDatabase()

	// Perform database migrations
	if err := configs.DB.AutoMigrate(&models.FoodItem{}); err != nil {
		log.Fatalf("Failed to migrate database: %v", err)
	}

	e := echo.New()

	// Middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	// Routes
	e.GET("/", func(c echo.Context) error {
		return c.String(http.StatusOK, "Hello, Smart Pantry!")
	})

	// Start server
	if err := e.Start(":8080"); err != nil {
		log.Fatalf("Shutting down the server: %v", err)
	}
}

================
File: backend/configs/config.go
================
package configs

import (
	"log"
	"os"

	"github.com/joho/godotenv"
)

func LoadEnv() {
	err := godotenv.Load()
	if err != nil && os.Getenv("GO_ENV") != "production" {
		log.Println("No .env file found or error loading it, using system environment variables")
	}
}

func GetEnv(key string, fallback string) string {
	value := os.Getenv(key)
	if len(value) == 0 {
		return fallback
	}
	return value
}

================
File: backend/configs/database.go
================
package configs

import (
	"log"
	"os"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

var DB *gorm.DB

// ConnectDatabase initializes the database connection using GORM.
func ConnectDatabase() {
	var err error
	databaseURL := os.Getenv("DATABASE_URL")
	if databaseURL == "" {
		log.Fatal("DATABASE_URL environment variable is not set")
	}

	DB, err = gorm.Open(sqlite.Open(databaseURL), &gorm.Config{})
	if err != nil {
		log.Fatalf("Failed to connect to the database: %v", err)
	}

	log.Println("Database connection established successfully")
}

================
File: backend/internal/controllers/pantry_controller.go
================
package controllers

import (
	"net/http"
	"strconv"

	"smart-pantry/backend/internal/services"

	"github.com/labstack/echo/v4"
)

type PantryController struct {
	service *services.PantryService
}

func NewPantryController(service *services.PantryService) *PantryController {
	return &PantryController{service: service}
}

func (pc *PantryController) GetPantryItems(c echo.Context) error {
	items, err := pc.service.GetPantryItems()
	if err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to get pantry items"})
	}
	return c.JSON(http.StatusOK, items)
}

func (pc *PantryController) CreatePantryItem(c echo.Context) error {
	var item services.PantryItemParams
	if err := c.Bind(&item); err != nil {
		return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid request"})
	}

	createdItem, err := pc.service.CreatePantryItem(item)
	if err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to create pantry item"})
	}
	return c.JSON(http.StatusCreated, createdItem)
}

func (pc *PantryController) UpdatePantryItem(c echo.Context) error {
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid item ID"})
	}

	var item services.PantryItemParams
	if err := c.Bind(&item); err != nil {
		return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid request"})
	}

	updatedItem, err := pc.service.UpdatePantryItem(id, item)
	if err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to update pantry item"})
	}
	return c.JSON(http.StatusOK, updatedItem)
}

func (pc *PantryController) DeletePantryItem(c echo.Context) error {
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid item ID"})
	}

	if err := pc.service.DeletePantryItem(id); err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to delete pantry item"})
	}
	return c.NoContent(http.StatusNoContent)
}

================
File: backend/internal/models/food_item.go
================
package models

import "time"

// FoodItem represents an item in the pantry
type FoodItem struct {
	ID        uint   `gorm:"primaryKey"`
	Name      string `gorm:"size:255;not null"`
	Quantity  int    `gorm:"not null"`
	CreatedAt time.Time
	UpdatedAt time.Time
}

================
File: backend/internal/models/pantry_model.go
================
package models

import "gorm.io/gorm"

// PantryItem represents the pantry_items table in the database.
type PantryItem struct {
	gorm.Model
	Name       string `gorm:"not null"`
	Quantity   int    `gorm:"not null"`
	ExpiryDate string `gorm:"type:date"` // Consider using time.Time and proper formatting
}

================
File: backend/internal/routes/api.go
================
package routes

import (
	"smart-pantry/backend/internal/controllers"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

func SetupAPIRoutes(e *echo.Echo, pantryController *controllers.PantryController) {
	api := e.Group("/api")
	api.Use(middleware.Logger())
	api.Use(middleware.Recover())

	pantry := api.Group("/pantry")
	pantry.GET("", pantryController.GetPantryItems)
	pantry.POST("", pantryController.CreatePantryItem)
	pantry.PUT("/:id", pantryController.UpdatePantryItem)
	pantry.DELETE("/:id", pantryController.DeletePantryItem)
}

================
File: backend/internal/services/pantry_service.go
================
package services

import (
	"smart-pantry/backend/internal/models"

	"gorm.io/gorm"
)

type PantryService struct {
	db *gorm.DB
}

func NewPantryService(db *gorm.DB) *PantryService {
	return &PantryService{db: db}
}

type PantryItemParams struct {
	Name       string  `json:"name"`
	Quantity   int     `json:"quantity"`
	ExpiryDate *string `json:"expiry_date"`
}

func (ps *PantryService) GetPantryItems() ([]models.PantryItem, error) {
	var items []models.PantryItem
	result := ps.db.Find(&items)
	return items, result.Error
}

func (ps *PantryService) CreatePantryItem(params PantryItemParams) (*models.PantryItem, error) {
	item := models.PantryItem{
		Name:       params.Name,
		Quantity:   params.Quantity,
		ExpiryDate: *params.ExpiryDate,
	}
	result := ps.db.Create(&item)
	return &item, result.Error
}

func (ps *PantryService) UpdatePantryItem(id int, params PantryItemParams) (*models.PantryItem, error) {
	var item models.PantryItem
	if err := ps.db.First(&item, id).Error; err != nil {
		return nil, err
	}

	item.Name = params.Name
	item.Quantity = params.Quantity
	item.ExpiryDate = *params.ExpiryDate

	result := ps.db.Save(&item)
	return &item, result.Error
}

func (ps *PantryService) DeletePantryItem(id int) error {
	var item models.PantryItem
	result := ps.db.Delete(&item, id)
	return result.Error
}

================
File: backend/Dockerfile
================
# backend/Dockerfile
# syntax=docker/dockerfile:1

## Builder stage
FROM golang:1.21 AS builder

WORKDIR /app

# Copy go mod and sum files
COPY backend/go.mod backend/go.sum ./
RUN go mod download

# Copy source files
COPY backend ./

# Build
RUN go build -o /out/server ./cmd/server.go

## Deploy stage
FROM alpine:latest  AS deploy

WORKDIR /app

COPY --from=builder /out/server /app/server
COPY .env.example /app/ # 環境変数をコピー

EXPOSE 8080

CMD ["./server"]

================
File: backend/go.mod
================
module smart-pantry/backend

go 1.21

require (
	github.com/joho/godotenv v1.5.1
	github.com/labstack/echo/v4 v4.11.4
	gorm.io/driver/sqlite v1.5.4
	gorm.io/gorm v1.25.5
)

require (
	github.com/golang-jwt/jwt v3.2.2+incompatible // indirect
	github.com/jinzhu/inflection v1.0.0 // indirect
	github.com/jinzhu/now v1.1.5 // indirect
	github.com/labstack/gommon v0.4.2 // indirect
	github.com/mattn/go-colorable v0.1.13 // indirect
	github.com/mattn/go-isatty v0.0.20 // indirect
	github.com/mattn/go-sqlite3 v1.14.17 // indirect
	github.com/valyala/bytebufferpool v1.0.0 // indirect
	github.com/valyala/fasttemplate v1.2.2 // indirect
	golang.org/x/crypto v0.17.0 // indirect
	golang.org/x/net v0.19.0 // indirect
	golang.org/x/sys v0.15.0 // indirect
	golang.org/x/text v0.14.0 // indirect
	golang.org/x/time v0.5.0 // indirect
)

================
File: backend/go.sum
================
github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/golang-jwt/jwt v3.2.2+incompatible h1:IfV12K8xAKAnZqdXVzCZ+TOjboZ2keLg81eXfW3O+oY=
github.com/golang-jwt/jwt v3.2.2+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=
github.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=
github.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=
github.com/jinzhu/now v1.1.5 h1:/o9tlHleP7gOFmsnYNz3RGnqzefHA47wQpKrrdTIwXQ=
github.com/jinzhu/now v1.1.5/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=
github.com/joho/godotenv v1.5.1 h1:7eLL/+HRGLY0ldzfGMeQkb7vMd0as4CfYvUVzLqw0N0=
github.com/joho/godotenv v1.5.1/go.mod h1:f4LDr5Voq0i2e/R5DDNOoa2zzDfwtkZa6DnEwAbqwq4=
github.com/labstack/echo/v4 v4.11.4 h1:vDZmA+qNeh1pd/cCkEicDMrjtrnMGQ1QFI9gWN1zGq8=
github.com/labstack/echo/v4 v4.11.4/go.mod h1:noh7EvLwqDsmh/X/HWKPUl1AjzJrhyptRyEbQJfxen8=
github.com/labstack/gommon v0.4.2 h1:F8qTUNXgG1+6WQmqoUWnz8WiEU60mXVVw0P4ht1WRA0=
github.com/labstack/gommon v0.4.2/go.mod h1:QlUFxVM+SNXhDL/Z7YhocGIBYOiwB0mXm1+1bAPHPyU=
github.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=
github.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=
github.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=
github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
github.com/mattn/go-sqlite3 v1.14.17 h1:mCRHCLDUBXgpKAqIKsaAaAsrAlbkeomtRFKXh2L6YIM=
github.com/mattn/go-sqlite3 v1.14.17/go.mod h1:2eHXhiwb8IkHr+BDWZGa96P6+rkvnG63S2DGjv9HUNg=
github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/stretchr/testify v1.8.4 h1:CcVxjf3Q8PM0mHUKJCdn+eZZtm5yQwehR5yeSVQQcUk=
github.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=
github.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=
github.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=
github.com/valyala/fasttemplate v1.2.2 h1:lxLXG0uE3Qnshl9QyaK6XJxMXlQZELvChBOCmQD0Loo=
github.com/valyala/fasttemplate v1.2.2/go.mod h1:KHLXt3tVN2HBp8eijSv/kGJopbvo7S+qRAEEKiv+SiQ=
golang.org/x/crypto v0.17.0 h1:r8bRNjWL3GshPW3gkd+RpvzWrZAwPS49OmTGZ/uhM4k=
golang.org/x/crypto v0.17.0/go.mod h1:gCAAfMLgwOJRpTjQ2zCCt2OcSfYMTeZVSRtQlPC7Nq4=
golang.org/x/net v0.19.0 h1:zTwKpTd2XuCqf8huc7Fo2iSy+4RHPd10s4KzeTnVr1c=
golang.org/x/net v0.19.0/go.mod h1:CfAk/cbD4CthTvqiEl8NpboMuiuOYsAr/7NOjZJtv1U=
golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.15.0 h1:h48lPFYpsTvQJZF4EKyI4aLHaev3CxivZmv7yZig9pc=
golang.org/x/sys v0.15.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
golang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=
golang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=
golang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=
golang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
gorm.io/driver/sqlite v1.5.4 h1:IqXwXi8M/ZlPzH/947tn5uik3aYQslP9BVveoax0nV0=
gorm.io/driver/sqlite v1.5.4/go.mod h1:qxAuCol+2r6PannQDpOP1FP6ag3mKi4esLnB/jHed+4=
gorm.io/gorm v1.25.5 h1:zR9lOiiYf09VNh5Q1gphfyia1JpiClIWG9hQaxB/mls=
gorm.io/gorm v1.25.5/go.mod h1:hbnx/Oo0ChWMn1BIhpy1oYozzpM15i4YPuHDmfYtwg8=

================
File: frontend/src/components/PantryForm.tsx
================
import React, { useState } from "react";
import { TextField, Button, Paper, Grid, Typography } from "@mui/material";

interface PantryFormProps {
  onCreateItem: (newItem: {
    Name: string;
    Quantity: number;
    ExpiryDate: string | null;
  }) => void;
}

const PantryForm: React.FC<PantryFormProps> = ({ onCreateItem }) => {
  const [name, setName] = useState("");
  const [quantity, setQuantity] = useState<number>(1);
  const [expiryDate, setExpiryDate] = useState<string | null>(null);

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    onCreateItem({ Name: name, Quantity: quantity, ExpiryDate: expiryDate });
    setName("");
    setQuantity(1);
    setExpiryDate(null);
  };

  return (
    <Paper elevation={3} style={{ padding: "20px", marginBottom: "20px" }}>
      <Typography variant="h6" component="h2" gutterBottom>
        Add New Item
      </Typography>
      <form onSubmit={handleSubmit}>
        <Grid container spacing={2} alignItems="center">
          <Grid item xs={12}>
            <TextField
              fullWidth
              label="Name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              fullWidth
              label="Quantity"
              type="number"
              value={quantity}
              onChange={(e) => setQuantity(Number(e.target.value))}
              inputProps={{ min: "1" }}
              required
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              fullWidth
              label="Expiry Date"
              type="date"
              value={expiryDate || ""}
              onChange={(e) => setExpiryDate(e.target.value)}
              InputLabelProps={{ shrink: true }}
            />
          </Grid>
          <Grid item xs={12}>
            <Button type="submit" variant="contained" color="primary">
              Add Item
            </Button>
          </Grid>
        </Grid>
      </form>
    </Paper>
  );
};

export default PantryForm;

================
File: frontend/src/components/PantryItemList.tsx
================
import React from "react";
import {
  List,
  ListItem,
  ListItemText,
  IconButton,
  ListItemSecondaryAction,
} from "@mui/material";
import DeleteIcon from "@mui/icons-material/Delete";
import EditIcon from "@mui/icons-material/Edit";

interface PantryItem {
  ID: number;
  CreatedAt: string;
  UpdatedAt: string;
  Name: string;
  Quantity: number;
  ExpiryDate: string | null;
}

interface PantryItemListProps {
  items: PantryItem[];
  onDeleteItem: (id: number) => void;
  onUpdateItem: (id: number, updatedItem: PantryItem) => void;
}

const PantryItemList: React.FC<PantryItemListProps> = ({
  items,
  onDeleteItem,
  onUpdateItem,
}) => {
  return (
    <List>
      {items.map((item) => (
        <ListItem key={item.ID}>
          <ListItemText
            primary={item.Name}
            secondary={`Quantity: ${item.Quantity}, Expires: ${
              item.ExpiryDate || "N/A"
            }`}
          />
          <ListItemSecondaryAction>
            <IconButton
              edge="end"
              aria-label="edit"
              onClick={() => onUpdateItem(item.ID, item)}
            >
              <EditIcon />
            </IconButton>
            <IconButton
              edge="end"
              aria-label="delete"
              onClick={() => onDeleteItem(item.ID)}
            >
              <DeleteIcon />
            </IconButton>
          </ListItemSecondaryAction>
        </ListItem>
      ))}
    </List>
  );
};

export default PantryItemList;

================
File: frontend/src/pages/PantryPage.tsx
================
import React, { useState, useEffect } from "react";
import axios from "axios";
import PantryForm from "../components/PantryForm";
import PantryItemList from "../components/PantryItemList";
import { Container, Typography, Snackbar, Alert } from "@mui/material";

interface PantryItem {
  ID: number;
  CreatedAt: string;
  UpdatedAt: string;
  Name: string;
  Quantity: number;
  ExpiryDate: string | null;
}

const PantryPage: React.FC = () => {
  const [items, setItems] = useState<PantryItem[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  useEffect(() => {
    fetchItems();
  }, []);

  const fetchItems = async () => {
    try {
      const response = await axios.get("/api/pantry");
      setItems(response.data);
    } catch (err: any) {
      setError("Failed to fetch pantry items.");
    }
  };

  const handleCreateItem = async (newItem: {
    Name: string;
    Quantity: number;
    ExpiryDate: string | null;
  }) => {
    try {
      const response = await axios.post("/api/pantry", newItem);
      setItems([...items, response.data]);
      setSuccess("Item created successfully.");
      setError(null);
      fetchItems();
    } catch (err: any) {
      setError("Failed to create pantry item.");
      setSuccess(null);
    }
  };

  const handleUpdateItem = async (id: number, updatedItem: PantryItem) => {
    try {
      await axios.put(`/api/pantry/${id}`, updatedItem);
      const updatedItems = items.map((item) =>
        item.ID === id ? updatedItem : item
      );
      setItems(updatedItems);
      setSuccess("Item updated successfully.");
      setError(null);
      fetchItems(); // Refresh item list
    } catch (err: any) {
      setError("Failed to update pantry item.");
      setSuccess(null);
    }
  };

  const handleDeleteItem = async (id: number) => {
    try {
      await axios.delete(`/api/pantry/${id}`);
      const filteredItems = items.filter((item) => item.ID !== id);
      setItems(filteredItems);
      setSuccess("Item deleted successfully.");
      setError(null);
      fetchItems(); // Refresh item list
    } catch (err: any) {
      setError("Failed to delete pantry item.");
      setSuccess(null);
    }
  };

  const handleSnackbarClose = () => {
    setError(null);
    setSuccess(null);
  };

  return (
    <Container maxWidth="md">
      <Typography variant="h4" component="h1" gutterBottom>
        Smart Pantry
      </Typography>

      <PantryForm onCreateItem={handleCreateItem} />

      <PantryItemList
        items={items}
        onUpdateItem={handleUpdateItem}
        onDeleteItem={handleDeleteItem}
      />

      <Snackbar
        open={!!error}
        autoHideDuration={6000}
        onClose={handleSnackbarClose}
        severity="error"
      >
        <Alert
          onClose={handleSnackbarClose}
          severity="error"
          sx={{ width: "100%" }}
        >
          {error}
        </Alert>
      </Snackbar>

      <Snackbar
        open={!!success}
        autoHideDuration={6000}
        onClose={handleSnackbarClose}
        severity="success"
      >
        <Alert
          onClose={handleSnackbarClose}
          severity="success"
          sx={{ width: "100%" }}
        >
          {success}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default PantryPage;

================
File: frontend/src/services/api.ts
================
import axios from "axios";

const apiClient = axios.create({
  baseURL: "/api",
  headers: {
    "Content-Type": "application/json",
  },
});

export const getPantryItems = async () => {
  const response = await apiClient.get("/pantry");
  return response.data;
};

export const createPantryItem = async (item) => {
  const response = await apiClient.post("/pantry", item);
  return response.data;
};

export const updatePantryItem = async (id, item) => {
  const response = await apiClient.put(`/pantry/${id}`, item);
  return response.data;
};

export const deletePantryItem = async (id) => {
  const response = await apiClient.delete(`/pantry/${id}`);
  return response.data;
};

================
File: frontend/src/App.tsx
================
import React from "react";
import PantryPage from "./pages/PantryPage";

function App() {
  return (
    <div>
      <PantryPage />
    </div>
  );
}

export default App;

================
File: frontend/src/index.tsx
================
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: frontend/package.json
================
{
  "name": "frontend",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "dev": "concurrently \"npm start\" \"nodemon backend/cmd/server.go\"",
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@mui/material": "^5.14.19",
    "axios": "^1.6.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "^5.0.1"
  },
  "devDependencies": {
    "@types/node": "^20.10.1",
    "@types/react": "^18.2.39",
    "@types/react-dom": "^18.2.17",
    "concurrently": "^8.5.2",
    "nodemon": "^3.0.1",
    "typescript": "^5.3.2"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: .env.example
================
# Backend Configuration
# ======================
# Database connection string
DATABASE_URL=postgres://user:password@localhost:5432/smart_pantry_db

# JWT secret key
JWT_SECRET=your_jwt_secret_key

# Server port
PORT=8080

# Frontend Configuration
# =======================
# API endpoint for the backend server
REACT_APP_API_ENDPOINT=http://localhost:8080/api

# Environment
# ===========
# Set to 'development' or 'production'
NODE_ENV=development

================
File: .gitignore
================
# Go
/bin/
/pkg/
/vendor/

# Node
/node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# React
/build/
/coverage/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDEs and editors
/.vscode/
/.idea/
/*.suo
/*.ntvs*
/*.njsproj
/*.sln

# OS files
.DS_Store
Thumbs.db

================
File: docker-compose.yml
================
version: "3.9"

services:
  backend:
    build: ./backend
    ports:
      - "8080:8080"
    environment:
      - GIN_MODE=debug # Goの実行モードをdebugに設定
      - DB_HOST=smart-pantry.db # SQLiteのファイル名
    volumes:
      - ./backend:/app
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    depends_on:
      - backend

================
File: PROJECT_STRUCTURE.md
================
# Project Structure

The Smart-pantry project is organized as follows:

```
smart-pantry/
├── backend/                   # Go backend
│   ├── cmd/
│   │   └── server.go          # Entry point for the backend server
│   ├── configs/
│   │   └── config.go          # Configuration settings
│   ├── internal/
│   │   ├── controllers/
│   │   │   └── pantry_controller.go   # Handles pantry-related requests
│   │   ├── models/
│   │   │   └── pantry_model.go        # Pantry data models
│   │   ├── routes/
│   │   │   └── api.go                 # API route definitions
│   │   └── services/
│   │       └── pantry_service.go      # Business logic for pantry
│   ├── migrations/                     # Database migration files
│   ├── scripts/                        # Helper scripts
│   ├── Dockerfile                      # Docker configuration for backend
│   ├── go.mod                          # Go module definition
│   └── go.sum                          # Go dependencies
├── frontend/                              # React frontend
│   ├── package.json                       # Node.js dependencies
│   ├── src/
│   │   ├── components/
│   │   │   ├── PantryForm.tsx             # Form for adding pantry items
│   │   │   └── PantryItemList.tsx         # List display for pantry items
│   │   ├── pages/
│   │   │   └── PantryPage.tsx              # Pantry management page
│   │   ├── services/
│   │   │   └── api.ts                      # API service for frontend
│   │   ├── styles/                          # CSS/SCSS styles
│   │   ├── utils/                           # Utility functions
│   │   ├── App.tsx                          # Main React component
│   │   └── index.tsx                        # React entry point
├── docker-compose.yml                      # Docker Compose configuration
├── .env.example                            # Example environment variables
├── .gitignore                              # Git ignore rules
└── README.md                               # Project documentation
```

================
File: README.md
================
# Smart-pantry

Smart-pantry is a web application designed to help users manage their pantry inventory efficiently. Built with a Go backend using the Echo framework and a React frontend, Smart-pantry offers a seamless experience for tracking, adding, and organizing pantry items.

## Table of Contents

- [Features](#features)
- [Getting Started](#getting-started)
  - [Prerequisites](#prerequisites)
  - [Installation](#installation)
- [Project Structure](#project-structure)
- [Contributing](#contributing)
- [License](#license)

## Features

- **Add Items:** Easily add new items to your pantry with detailed information.
- **View Inventory:** View a comprehensive list of all pantry items.
- **Edit & Delete:** Modify or remove items as needed.
- **Search & Filter:** Quickly find items using search and filter functionalities.
- **Responsive Design:** Accessible on both desktop and mobile devices.

## Getting Started

### Prerequisites

Ensure you have the following installed on your system:

- **Go**: 1.21
- **Node.js**: 18.x
- **Docker** (optional, for containerization)

### Installation

1. **Clone the Repository:**

   ```bash
   git clone https://github.com/yourusername/smart-pantry.git
   cd smart-pantry
   ```

2. **Backend Setup:**

   ```bash
   cd backend
   go mod download
   ```

3. **Frontend Setup:**

   ```bash
   cd ../frontend
   npm install
   ```

4. **Environment Variables:**

   - Duplicate the `.env.example` file and rename it to `.env`.
   - Fill in the necessary environment variables as per your setup.

5. **Run the Application:**

   ```bash
   cd ../
   docker-compose up --build
   ```

6. **Access the Application:**
   Open your browser and navigate to `http://localhost:8080`.

## Project Structure

```
smart-pantry/
├── backend/
│   ├── cmd/
│   │   └── server.go
│   ├── configs/
│   │   └── config.go
│   ├── internal/
│   │   ├── controllers/
│   │   │   └── pantry_controller.go
│   │   ├── models/
│   │   │   └── pantry_model.go
│   │   ├── routes/
│   │   │   └── api.go
│   │   └── services/
│   │       └── pantry_service.go
│   ├── migrations/
│   ├── scripts/
│   ├── Dockerfile
│   ├── go.mod
│   └── go.sum
├── frontend/
│   ├── package.json
│   ├── src/
│   │   ├── components/
│   │   │   ├── PantryForm.tsx
│   │   │   └── PantryItemList.tsx
│   │   ├── pages/
│   │   │   └── PantryPage.tsx
│   │   ├── services/
│   │   │   └── api.ts
│   │   ├── styles/
│   │   ├── utils/
│   │   ├── App.tsx
│   │   └── index.tsx
├── docker-compose.yml
├── .env.example
├── .gitignore
└── README.md
```

## Contributing

Contributions are welcome! Please fork the repository and submit a pull request for any enhancements or bug fixes.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.
