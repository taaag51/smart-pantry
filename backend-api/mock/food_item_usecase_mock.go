// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/food_item_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/taaag51/smart-pantry/backend-api/model"
)

// MockIFoodItemUsecase is a mock of IFoodItemUsecase interface.
type MockIFoodItemUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIFoodItemUsecaseMockRecorder
}

// MockIFoodItemUsecaseMockRecorder is the mock recorder for MockIFoodItemUsecase.
type MockIFoodItemUsecaseMockRecorder struct {
	mock *MockIFoodItemUsecase
}

// NewMockIFoodItemUsecase creates a new mock instance.
func NewMockIFoodItemUsecase(ctrl *gomock.Controller) *MockIFoodItemUsecase {
	mock := &MockIFoodItemUsecase{ctrl: ctrl}
	mock.recorder = &MockIFoodItemUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFoodItemUsecase) EXPECT() *MockIFoodItemUsecaseMockRecorder {
	return m.recorder
}

// CreateFoodItem mocks base method.
func (m *MockIFoodItemUsecase) CreateFoodItem(foodItem model.FoodItem) (model.FoodItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFoodItem", foodItem)
	ret0, _ := ret[0].(model.FoodItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFoodItem indicates an expected call of CreateFoodItem.
func (mr *MockIFoodItemUsecaseMockRecorder) CreateFoodItem(foodItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFoodItem", reflect.TypeOf((*MockIFoodItemUsecase)(nil).CreateFoodItem), foodItem)
}

// DeleteFoodItem mocks base method.
func (m *MockIFoodItemUsecase) DeleteFoodItem(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFoodItem", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFoodItem indicates an expected call of DeleteFoodItem.
func (mr *MockIFoodItemUsecaseMockRecorder) DeleteFoodItem(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFoodItem", reflect.TypeOf((*MockIFoodItemUsecase)(nil).DeleteFoodItem), id)
}

// GetAllFoodItems mocks base method.
func (m *MockIFoodItemUsecase) GetAllFoodItems() ([]model.FoodItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFoodItems")
	ret0, _ := ret[0].([]model.FoodItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFoodItems indicates an expected call of GetAllFoodItems.
func (mr *MockIFoodItemUsecaseMockRecorder) GetAllFoodItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFoodItems", reflect.TypeOf((*MockIFoodItemUsecase)(nil).GetAllFoodItems))
}

// GetFoodItemById mocks base method.
func (m *MockIFoodItemUsecase) GetFoodItemById(id uint) (model.FoodItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoodItemById", id)
	ret0, _ := ret[0].(model.FoodItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFoodItemById indicates an expected call of GetFoodItemById.
func (mr *MockIFoodItemUsecaseMockRecorder) GetFoodItemById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoodItemById", reflect.TypeOf((*MockIFoodItemUsecase)(nil).GetFoodItemById), id)
}

// UpdateFoodItem mocks base method.
func (m *MockIFoodItemUsecase) UpdateFoodItem(foodItem model.FoodItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFoodItem", foodItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFoodItem indicates an expected call of UpdateFoodItem.
func (mr *MockIFoodItemUsecaseMockRecorder) UpdateFoodItem(foodItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFoodItem", reflect.TypeOf((*MockIFoodItemUsecase)(nil).UpdateFoodItem), foodItem)
}
